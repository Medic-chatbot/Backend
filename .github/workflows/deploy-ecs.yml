name: ECS Multi-Service CI/CD

on:
  push:
    branches: [ main ]  # 프로덕션 배포만
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests with pytest
      run: |
        pytest --cov=./ --cov-report=xml
      continue-on-error: true

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine environment
      id: env
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
          echo "image_tag=latest" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "image_tag=dev" >> $GITHUB_OUTPUT
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # API Service 빌드 & 푸시
    - name: Build and push API Service
      run: |
        docker build -f Dockerfile -t $ECR_REGISTRY/medic-api-service:${{ steps.env.outputs.image_tag }} .
        docker push $ECR_REGISTRY/medic-api-service:${{ steps.env.outputs.image_tag }}

    # ML Service 빌드 & 푸시
    - name: Build and push ML Service
      run: |
        docker build -f ml-service/Dockerfile -t $ECR_REGISTRY/medic-ml-service:${{ steps.env.outputs.image_tag }} .
        docker push $ECR_REGISTRY/medic-ml-service:${{ steps.env.outputs.image_tag }}


    # 태스크 정의 업데이트 및 등록
    - name: Deploy ECS Task Definitions
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        ECR_API_SERVICE: ${{ env.ECR_REGISTRY }}/medic-api-service
        ECR_ML_SERVICE: ${{ env.ECR_REGISTRY }}/medic-ml-service
        IMAGE_TAG: ${{ steps.env.outputs.image_tag }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ML_SERVICE_URL: ${{ secrets.ML_SERVICE_URL }}  
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
        ALB_HOST: ${{ secrets.ALB_HOST }}
        ALLOWED_HOSTS_STRING: ${{ secrets.ALLOWED_HOSTS_STRING }}
        KAKAO_REST_API_KEY: ${{ secrets.KAKAO_REST_API_KEY }}
        DEBUG: ${{ secrets.DEBUG }}
        RECOMMEND_CONFIDENCE_THRESHOLD: ${{ secrets.RECOMMEND_CONFIDENCE_THRESHOLD }}
        RECOMMEND_LIMIT: ${{ secrets.RECOMMEND_LIMIT }}
        SYMPTOM_HISTORY_UTTERANCES: ${{ secrets.SYMPTOM_HISTORY_UTTERANCES }}

      run: |
        chmod +x scripts/deploy-ecs-tasks.sh
        ./scripts/deploy-ecs-tasks.sh

    # ECS 서비스 생성/업데이트 (프로덕션만)
    - name: Create or Update ECS Services
      if: steps.env.outputs.environment == 'prod'
      run: |
        # 최신 태스크 정의 ARN 조회 (텍스트 출력의 'None' 토큰 제거)
        API_TD=$(aws ecs list-task-definitions \
          --family-prefix medic-api-service \
          --region ${{ env.AWS_REGION }} \
          --sort DESC \
          --no-paginate \
          --query 'taskDefinitionArns[0]' \
          --output text | awk '{print $1}')
        ML_TD=$(aws ecs list-task-definitions \
          --family-prefix medic-ml-service \
          --region ${{ env.AWS_REGION }} \
          --sort DESC \
          --no-paginate \
          --query 'taskDefinitionArns[0]' \
          --output text | awk '{print $1}')
        echo "Using task definitions:\nAPI=$API_TD\nML=$ML_TD"

        # API 서비스 생성 또는 업데이트
        if aws ecs describe-services --cluster medic-gpu-cluster --services medic-api-service --region ${{ env.AWS_REGION }} --query 'services[0].status' --output text 2>/dev/null | grep -q ACTIVE; then
          echo "API 서비스 업데이트 중..."
          aws ecs update-service --cluster medic-gpu-cluster \
                                --service medic-api-service \
                                --task-definition "$API_TD" \
                                --force-new-deployment \
                                --region ${{ env.AWS_REGION }}
        else
          echo "API 서비스 생성 중..."
          aws ecs create-service --cluster medic-gpu-cluster \
                                --service-name medic-api-service \
                                --task-definition "$API_TD" \
                                --desired-count 1 \
                                --launch-type FARGATE \
                                --network-configuration "awsvpcConfiguration={subnets=[subnet-0af516b746f51bf50],securityGroups=[sg-02d21d7d277ed217d]}" \
                                --load-balancers targetGroupArn=arn:aws:elasticloadbalancing:ap-northeast-2:832362089079:targetgroup/medic-gpu-cluster-api-tg-ip/f1a73846ea163a99,containerName=medic-api-container,containerPort=8000 \
                                --region ${{ env.AWS_REGION }}
        fi

        # ML 서비스 생성 또는 업데이트
        if aws ecs describe-services --cluster medic-gpu-cluster --services medic-ml-service --region ${{ env.AWS_REGION }} --query 'services[0].status' --output text 2>/dev/null | grep -q ACTIVE; then
          echo "ML 서비스 업데이트 중..."
          aws ecs update-service --cluster medic-gpu-cluster \
                                --service medic-ml-service \
                                --task-definition "$ML_TD" \
                                --force-new-deployment \
                                --region ${{ env.AWS_REGION }}
        else
          echo "ML 서비스 생성 중..."
          aws ecs create-service --cluster medic-gpu-cluster \
                                --service-name medic-ml-service \
                                --task-definition "$ML_TD" \
                                --desired-count 1 \
                                --launch-type EC2 \
                                --load-balancers targetGroupArn=arn:aws:elasticloadbalancing:ap-northeast-2:832362089079:targetgroup/medic-gpu-cluster-ml-tg/3c61d34b09a1419a,containerName=medic-ml-container,containerPort=8001 \
                                --placement-strategy type=spread,field=instanceId \
                                --region ${{ env.AWS_REGION }}
        fi


    # 배포 알림
    - name: Deployment notification
      run: |
        echo "배포 완료!"
        echo "환경: ${{ steps.env.outputs.environment }}"
        echo "이미지 태그: ${{ steps.env.outputs.image_tag }}"
        echo "커밋: ${{ github.sha }}"
