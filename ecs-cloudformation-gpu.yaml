AWSTemplateFormatVersion: '2010-09-09'
Description: 'GPU 지원 ECS 클러스터 - 완벽한 GPU 속성 등록 보장'

Parameters:
  VpcId:
    Type: String
    Description: '기존 VPC ID'
    Default: 'vpc-02ad6348de1cfd429'

  PublicSubnet1:
    Type: String
    Description: '퍼블릭 서브넷 1 (RDS와 같은 AZ: ap-northeast-2c)'
    Default: 'subnet-0af516b746f51bf50' 

  AlbArn:
    Type: String
    Description: '기존 ALB ARN'
    Default: 'arn:aws:elasticloadbalancing:ap-northeast-2:832362089079:loadbalancer/app/medic-alb/845722b53984f23e'

  ClusterName:
    Type: String
    Description: 'ECS 클러스터 이름'
    Default: 'medic-gpu-cluster'

  InstanceType:
    Type: String
    Description: 'EC2 인스턴스 타입'
    Default: 'g4dn.xlarge'
    AllowedValues:
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
      - g4dn.8xlarge

  MinInstances:
    Type: Number
    Description: '최소 인스턴스 수'
    Default: 1

  MaxInstances:
    Type: Number
    Description: '최대 인스턴스 수'
    Default: 2

  DesiredInstances:
    Type: Number
    Description: '원하는 인스턴스 수'
    Default: 1

Resources:
  # ECS 클러스터
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
        - !Ref ECSAutoScalingCapacityProvider
      Tags:
        - Key: Environment
          Value: prod
        - Key: Project
          Value: medic-chatbot
        - Key: GPU
          Value: enabled
        - Key: ManagedBy
          Value: CloudFormation

  # ECS 인스턴스 역할
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-instance-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  # ECS 태스크 실행 역할
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-task-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # ECS 태스크 역할
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  # 인스턴스 프로파일
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ClusterName}-instance-profile'
      Roles:
        - !Ref ECSInstanceRole

  # GPU 지원 Launch Template
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ClusterName}-gpu-lt'
      LaunchTemplateData:
        ImageId: 'ami-00e29caee865c3c68'  # ECS GPU 최적화 AMI (2024-07-12 최신)
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt ECSInstanceProfile.Arn
        KeyName: 'medic'
        SecurityGroupIds:
          - !Ref ECSSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # ECS 클러스터 등록 및 GPU 지원 활성화
            echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
            echo ECS_ENABLE_GPU_SUPPORT=true >> /etc/ecs/ecs.config
            echo ECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"] >> /etc/ecs/ecs.config
            echo ECS_INSTANCE_ATTRIBUTES={\"environment\":\"prod\",\"ecs.capability.gpu\":\"true\"} >> /etc/ecs/ecs.config

            # NVIDIA Container Toolkit 설치 및 설정 (Amazon Linux 2용)
            sudo yum update -y
            sudo yum install -y nvidia-container-toolkit
            sudo systemctl restart docker

            # Docker 데몬 설정 (NVIDIA 런타임 기본값)
            sudo tee /etc/docker/daemon.json > /dev/null <<EOF
            {
              "default-runtime": "nvidia",
              "runtimes": {
                "nvidia": {
                  "path": "/usr/bin/nvidia-container-runtime",
                  "runtimeArgs": []
                }
              }
            }
            EOF

            # Docker 및 ECS 에이전트 재시작
            sudo systemctl restart docker
            sudo systemctl enable ecs
            sudo systemctl start ecs

            # NVIDIA SMI 확인
            nvidia-smi || echo "NVIDIA GPU not detected"

  # ECS 보안 그룹
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ClusterName}-sg'
      GroupDescription: 'ECS GPU Cluster Security Group'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'HTTP access'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS access'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: 'SSH access for maintenance'
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 10.0.0.0/8
          Description: 'API service access'
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8001
          CidrIp: 10.0.0.0/8
          Description: 'ML service access'
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-security-group'
        - Key: Environment
          Value: prod
        - Key: Project
          Value: medic-chatbot

  # Auto Scaling Group
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ClusterName}-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: '1'
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      DesiredCapacity: !Ref DesiredInstances
      VPCZoneIdentifier:
        - !Ref PublicSubnet1  # RDS와 같은 AZ(ap-northeast-2c) 사용
      TargetGroupARNs:
        - !Ref ApiTargetGroup
        - !Ref MlTargetGroup
        - !Ref NginxTargetGroup
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      TerminationPolicies:
        - OldestInstance
        - Default
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-instance'
          PropagateAtLaunch: true
        - Key: Environment
          Value: prod
          PropagateAtLaunch: true
        - Key: Project
          Value: medic-chatbot
          PropagateAtLaunch: true
        - Key: GPU
          Value: enabled
          PropagateAtLaunch: true
        - Key: ManagedBy
          Value: CloudFormation
          PropagateAtLaunch: true

  # Auto Scaling Capacity Provider
  ECSAutoScalingCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: !Sub '${ClusterName}-capacity-provider'
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 80
          MinimumScalingStepSize: 1
          MaximumScalingStepSize: 10
        ManagedTerminationProtection: DISABLED
      Tags:
        - Key: Environment
          Value: prod
        - Key: Project
          Value: medic-chatbot
        - Key: GPU
          Value: enabled

  # Target Groups
  ApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ClusterName}-api-tg'
      Protocol: HTTP
      Port: 8000
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckPath: /api/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  MlTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ClusterName}-ml-tg'
      Protocol: HTTP
      Port: 8001
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  NginxTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ClusterName}-nginx-tg'
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  # ALB 리스너 규칙들
  ApiListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref AlbHttpListener
      Priority: 10
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - '/api/*'
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ApiTargetGroup

  MlListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref AlbHttpListener
      Priority: 20
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - '/ml/*'
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MlTargetGroup

  # ALB 기본 HTTP 리스너 생성
  AlbHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AlbArn
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NginxTargetGroup

Outputs:
  ClusterName:
    Description: 'ECS 클러스터 이름'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  ClusterArn:
    Description: 'ECS 클러스터 ARN'
    Value: !GetAtt ECSCluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ClusterArn'

  TaskExecutionRoleArn:
    Description: 'ECS 태스크 실행 역할 ARN'
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TaskExecutionRoleArn'

  TaskRoleArn:
    Description: 'ECS 태스크 역할 ARN'
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TaskRoleArn'

  ApiTargetGroupArn:
    Description: 'API 타겟 그룹 ARN'
    Value: !Ref ApiTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-ApiTargetGroupArn'

  MlTargetGroupArn:
    Description: 'ML 타겟 그룹 ARN'
    Value: !Ref MlTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-MlTargetGroupArn'

  NginxTargetGroupArn:
    Description: 'Nginx 타겟 그룹 ARN'
    Value: !Ref NginxTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-NginxTargetGroupArn'
